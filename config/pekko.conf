# Akka configurations
pekko {
  extensions = ["org.apache.pekko.cluster.pubsub.DistributedPubSub"]
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  http.parsing.max-uri-length = 64k
  actor {
    provider = cluster
    serialize-messages = on
    serializers {
      proto = "org.apache.pekko.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "actors.serializer.Serializable" = proto
    }
  }
  remote {
    log-remote-lifecycle-events = off
    transport = tcp
    artery {
      canonical {
        hostname = ${?HOSTNAME}
        port = 25520
      }
      bind {
        hostname = 0.0.0.0
        port = 25520
      }
    }
  }
  discovery {
    kubernetes-api {
      use-raw-ip = {{ .Values.podsDirectConnect }}
      pod-namespace = "{{ .Release.Namespace }}"
      pod-label-selector = "app.kubernetes.io/name={{ include "common.names.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"
    }
  }
  management {
    http {
      hostname = ${?HOSTNAME}
      bind-hostname = 0.0.0.0
      port = 7626
      bind-port = 7626
    }
    health-checks {
      readiness-checks {
        stream = "healthcheck.StreamReadinessCheck"
      }
      liveness-checks {
        stream = "healthcheck.StreamLivenessCheck"
      }
    }
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        port-name = management
        protocol = tcp
      {{ if .Values.horizontalAutoscaler.enabled }}
        required-contact-point-nr = "{{ .Values.horizontalAutoscaler.minReplicas }}"
      {{ else }}
        required-contact-point-nr = 1
      {{ end }}
      }
    }
  }
  cluster {
    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
  {{- if .Values.leases.enabled }}
    split-brain-resolver {
      active-strategy = "lease-majority"
      lease-majority {
        lease-implementation = "org.apache.pekko.coordination.lease.kubernetes"
      }
    }
    singleton {
      use-lease = "org.apache.pekko.coordination.lease.kubernetes"
    }
  {{- end }}
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    pub-sub {
      name = distributedPubSubMediator
      routing-logic = random
      send-to-dead-letters-when-no-subscribers = on
    }
  }
  {{- if .Values.leases.enabled }}
  coordination.lease.kubernetes {
    lease-class = "org.apache.pekko.coordination.lease.kubernetes.NativeKubernetesLease"
  }
  {{- end }}
  coordinated-shutdown.exit-jvm = off
}
